This one's pretty obvious.  I often find myself not remembering what I've changed and when things fail, that's a pain.  Usually I try
to comment out the original so it's still there, but I often forget or don't bother to.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

Especially when I'm trying to solve a programming problem I will go through a dozen or so attempts.  
There is almost always a time when I think "didn't I try this before" or worse, "Hey, I think I had this in better shape a few hours ago.

What do you think are the pros and cons of manually choosing when to create a commit, 
like you do in Git, vs having versions automatically saved, like Google docs does?

Con: you could be so focused on the work that you forget to commit.  Pro: you can judge
when you think a change is important enough to commit.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others,
like Google Docs, treat each file seperately?

My guess is that Git, built for programmers, has to deal with interrelated modules much more often than Google Docs, 
which is at its best dealing with multiple authors or commentators on one file.

How can you use the commands git log and git diff to view the history of files?

Git log will give you a history of all the changes in your file, allowing you to track down the one you are interested in.  Git diff can
then tell you what changes were made, giving you a clue as to where the error or feature you want to change is.

How might using version control make you more confident to make changes that could break something?

Since you can always go back you have much less risk of losing a lot of time and work.


How do I plan to use Git?
1. to keep track of versions of my programs
2. to more easily work with Udacity
3. I may try to use it with my technical writing for work.
